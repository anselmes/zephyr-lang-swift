# =============================================================================
# Hello Swift Module Definition
# =============================================================================
#
# This YAML file defines a sample Swift module called "hello" that demonstrates
# how to create reusable Swift libraries for Zephyr RTOS applications. This
# serves as an example of how to structure and configure Swift modules within
# the Zephyr ecosystem.
#
# Module Purpose:
# ---------------
# The "hello" module is a sample Swift library that provides:
# - Basic Swift functionality demonstrations
# - Example of Swift library structure for Zephyr
# - Template for creating custom Swift modules
# - Integration example with Zephyr's module system
#
# Usage in Applications:
# ----------------------
# Other Swift applications can import and use this module by:
# 1. Ensuring this module is built before the application
# 2. Adding the module to Swift include paths
# 3. Importing the module in Swift code: `import Hello`
# 4. Using the module's exported functions and types
#
# Directory Structure:
# --------------------
# The hello module follows standard Swift module layout:
# - lib/: Swift source files implementing the module functionality
# - zephyr/: Zephyr-specific configuration (this directory)
# - CMakeLists.txt: Build configuration for the Swift library
# - Kconfig: Configuration options specific to this module
#
# =============================================================================

# Module identification name used by Zephyr's module system
# This name should match the Swift module name and directory structure
# Applications will use this name when importing: `import Hello`
name: hello

# Build configuration section
# Specifies how Zephyr should build this Swift module
build:
  # CMake build script location (relative to this file)
  # Points to the CMakeLists.txt that handles Swift library compilation
  # The "." indicates the CMakeLists.txt is in the same directory as this YAML file
  cmake: .

  # Kconfig configuration file location (relative to this file)
  # Defines module-specific configuration options that can be enabled/disabled
  # These options control module features and compilation behavior
  kconfig: Kconfig
