// SPDX-License-Identifier: GPL-3.0
// Copyright (c) 2025 Schubert Anselme <schubert@anselm.es>

/**
 * @file BridgingHeader.h
 * @brief Common header for Zephyr and Embedded Swift integration.
 *
 * This header serves as the bridging interface between Swift and C code in the project.
 * It includes necessary Zephyr RTOS headers to make Zephyr functionality available
 * to Swift code through C interoperability. The Swift compiler processes this header
 * when the '-import-bridging-header' flag is used during compilation.
 *
 * Headers are organized into logical groups:
 * - Project configuration: Generated by Zephyr build system
 * - Kernel APIs: Core Zephyr kernel functionality
 * - Device APIs: Hardware access and management
 * - GPIO APIs: General purpose I/O control
 */

#pragma once

// ===== Project Configuration =====

// Include auto-generated configuration header
// This file is generated by Kconfig during the build process and contains
// all the project configuration settings from prj.conf
#include <autoconf.h>

// ===== Zephyr Kernel APIs =====

#include <zephyr/kernel.h>        // Core kernel functionality including scheduling, threading, and synchronization

// ===== Device and Hardware APIs =====

#include <zephyr/device.h>        // Generic device model interfaces for hardware access
#include <zephyr/drivers/gpio.h>  // GPIO interfaces for pin control and interrupts

// ===== C Function Declarations =====

/**
 * @brief Get the GPIO device instance for the specified port
 *
 * Retrieves the Zephyr device structure for the requested GPIO port.
 * This function provides a simplified interface for Swift code to access GPIO devices.
 *
 * @param port_name Name of the GPIO port (e.g., "GPIO_0", "GPIO_1")
 * @return Pointer to the GPIO device, or NULL if the device is not found
 */
const struct device *get_gpio_device(const char *port_name);

/**
 * @brief Configure a GPIO pin for the specified direction and flags
 *
 * Sets up a GPIO pin with the specified configuration. This function provides
 * a simplified interface for Swift code to configure GPIO pins.
 *
 * @param dev GPIO device pointer obtained from get_gpio_device()
 * @param pin Pin number to configure
 * @param dir Direction (GPIO_INPUT or GPIO_OUTPUT)
 * @param flags Additional configuration flags (pull-up/down, etc.)
 * @return 0 on success, negative error code on failure
 */
int configure_gpio_pin(const struct device *dev, uint8_t pin, gpio_flags_t dir, gpio_flags_t flags);
